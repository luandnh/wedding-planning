version: "3.8"

name: wedding-planning
services:

  backend-migrate:
    build: ./backend # Use the same build context as your backend
    environment:
      # Pass necessary environment variables for migration
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
    networks:
      - proxy
    command: ["npx", "prisma", "migrate", "deploy"]

  backend:
    build: ./backend
    ports:
      - "15301:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${BACKEND_PORT:-3001}
    volumes:
      # - ./backend:/app # Uncomment if you want to mount the backend source code for development
      - /app/node_modules
    networks:
      - proxy
    depends_on:
      backend-migrate: # Ensure migrations run successfully before starting the backend
        condition: service_completed_successfully # Wait for the migration service to complete with exit code 0


  frontend:
    build: ./frontend # Path to your frontend Dockerfile
    ports:
      - "15302:4321" # Host_port:Container_port (Astro's default preview/start port)
    environment:
      PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL:-http://backend:3001} # Use the backend service name for internal communication
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      # - ./frontend:/app # Uncomment if you want to mount the frontend source code for development
      - /app/node_modules # Exclude node_modules for frontend
    depends_on:
      - backend
    networks:
      - proxy

networks:
  proxy:
    external: true
